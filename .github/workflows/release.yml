name: Versioning & Release

on:
  push:
    branches:
      - main

jobs:
  versioning:
    name: Versioning
    runs-on: ubuntu-latest
    outputs:
      new_release_version: ${{steps.semantic.outputs.new_release_version}}
      new_release_major_version: ${{steps.semantic.outputs.new_release_major_version}}
      new_release_minor_version: ${{steps.semantic.outputs.new_release_minor_version}}
      new_release_patch_version: ${{steps.semantic.outputs.new_release_patch_version}}
      new_release_published: ${{steps.semantic.outputs.new_release_published}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Semantic Versioning
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  docker-build:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: versioning
    if: needs.versioning.outputs.new_release_published
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          file: deployments/distribute/Dockerfile
          context: .
          push: true
          tags: |
           ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
           ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ needs.versioning.outputs.new_release_version }}
           ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ needs.versioning.outputs.new_release_major_version }}
           ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ needs.versioning.outputs.new_release_major_version }}.${{ steps.semantic.outputs.new_release_minor_version }}
  golang-build:
    name: Go Build
    runs-on: ubuntu-latest
    needs: versioning
    if: needs.versioning.outputs.new_release_published
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
      - name: Build Go binary
        run: |
          mkdir -p build
          platforms=("linux/amd64" "linux/arm64" "windows/amd64" "darwin/amd64" "darwin/arm64")
          for platform in "${platforms[@]}"; do
            os=$(echo $platform | cut -d'/' -f1)
            arch=$(echo $platform | cut -d'/' -f2)
            output="build/bekup-${os}-${arch}"
            if [ "$os" = "windows" ]; then
              output="${output}.exe"
            fi
            echo "Building for $platform..."
            GOOS=$os GOARCH=$arch go build -o $output ./cmd/main.go
          done
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bekup-binary-file
          path: build/*